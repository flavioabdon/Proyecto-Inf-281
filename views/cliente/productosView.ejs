<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Productos Artesanales</title>
  <!-- font-awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css" />

  <!-- styles css -->
  <link rel="stylesheet" href="/moduloProducto/css/styles.css" />
  <link rel="stylesheet" href="/moduloProducto/css/styleCompras.css" />

</head>

<body>
  <!-- navbar -->
  <nav class="navbar page">
    <div class="nav-center">
      <!-- links -->
      <div>
        <button class="toggle-nav">
          <i class="fas fa-bars"></i>
        </button>
        <ul class="nav-links">
          <li>
            <a href="/" class="nav-link">
              Inicio
            </a>
          </li>
          <li>
            <a href="/comprasCliente" class="nav-link">
              Perfil
            </a>
          </li>
          <li>
            <a href="#" class="nav-link">
              Cerrar Sesión
            </a>
          </li>
        </ul>
      </div>
      <!-- logo -->
      <img src="/moduloProducto/images/logo.png" class="nav-logo" alt="logo" />
      <!-- cart icon -->
      <div class="toggle-container">
        <button class="toggle-cart">
          <i class="fas fa-shopping-cart"></i>
        </button>
        <span class="cart-item-count">1</span>
      </div>
    </div>
  </nav>
  <!-- hero -->
  <section class="page-hero">
    <div class="section-center">
      <h3 class="page-hero-title">Productos Artesanales</h3>
    </div>
  </section>
  <!-- sidebar -->
  <div class="sidebar-overlay">
    <aside class="sidebar">
      <!-- close -->
      <button class="sidebar-close">
        <i class="fas fa-times"></i>
      </button>
      <!-- links -->
      <ul class="sidebar-links">
        <li>
          <a href="/" class="sidebar-link">
            <i class="fas fa-home fa-fw"></i>
            Inicio
          </a>
        </li>
        <li>
          <a href="#" class="sidebar-link">
            <i class="fas fa-couch fa-fw"></i>
            Perfil
          </a>
        </li>
        <li>
          <a href="#" class="sidebar-link">
            <i class="fas fa-book fa-fw"></i>
            Cerrar Sesión
          </a>
        </li>
      </ul>
    </aside>
  </div>
  <!-- cart -->
  <div class="cart-overlay">
    <aside class="cart">
      <button class="cart-close">
        <i class="fas fa-times"></i>
      </button>
      <header>
        <h3 class="text-slanted">Tu Carrito</h3>
      </header>
      <!-- cart items -->
      <div class="cart-items"></div>
      <!-- footer -->
      <footer>
        <h3 class="cart-total text-slanted" id="totalPrecioCarrito">
          total : Bs 12.99
        </h3>
        <button class="cart-checkout btn" id="buyButton">Comprar</button>
      </footer>
    </aside>
  </div>
  <!-- products -->
  <section class="products">
    <!-- filters -->
    <div class="filters">
      <div class="filters-container">
        <!-- search -->
        <form class="input-form">
          <input type="text" class="search-input" placeholder="search..." />
        </form>
        <!-- categories -->
        <h4>Artesanias</h4>
        <article class="companies">
          <button class="company-btn">Todos</button>
          <button class="company-btn">Textiles</button>
        </article>
        <!-- price -->
        <h4>Precio</h4>
        <form class="price-form">
          <input type="range" class="price-filter" min="0" value="50" max="100" />
        </form>
        <p class="price-value"></p>
      </div>
    </div>
    <!-- products -->
    <div class="products-container"></div>
  </section>

  <form id="completeForm">
    <!-- Modal 1: Datos personales -->
    <div class="modal-overlay" id="modalOverlay1">
      <div class="modal-compras">
        <h3>Datos personales</h3>

        <!-- Campo Nombres -->
        <label for="nombreCliente" class="labels">Nombres:</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-user-circle"></i></span>
          <input type="text" class="form-control" id="nombreCliente" name="nombreCliente" disabled>
        </div>

        <!-- Campo Apellidos -->
        <label for="apellidoCliente" class="labels">Apellidos:</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-tag"></i></span>
          <input type="text" class="form-control" id="apellidoCliente" name="apellidoCliente" disabled>
        </div>

        <!-- Campo C.I. -->
        <label for="ciCliente" class="labels">C.I.:</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-id-badge"></i></span>
          <input type="text" class="form-control" id="ciCliente" name="ciCliente" disabled>
        </div>

        <button type="button" class="btn" id="nextButton1">Siguiente</button>
        <button type="button" class="modalCompras-close" id="modalClose1">&times;</button>
      </div>
    </div>

    <!-- Modal 2: Dirección -->
    <div class="modal-overlay" id="modalOverlay2">
      <div class="modal-compras">
        <h3>Dirección de Envío</h3>

        <!-- Campo de Longitud con ícono de coordenadas -->
        <label for="longitudCliente" class="labels">Longitud:</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-map-marker-alt"></i></span>
          <input type="text" class="form-control" id="longitudCliente" name="longitudCliente" disabled required>
        </div>

        <!-- Campo de Latitud con ícono de coordenadas -->
        <label for="latitudCliente" class="labels">Latitud:</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-map-marker-alt"></i></span>
          <input type="text" class="form-control" id="latitudCliente" name="latitudCliente" disabled required>
        </div>

        <!-- Campo de Dirección con ícono de dirección -->
        <label for="direccionCliente" class="labels">Dirección:</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-map-signs"></i></span>
          <input type="text" class="form-control" id="direccionCliente" name="direccionCliente"
            placeholder="Dirección de envío" required>
        </div>

        <!-- Mapa -->
        <div class="modal-bodyCompras">
          <div id="map" style="width: 100%; height: 350px;"></div>
        </div>

        <!-- Botones de navegación -->
        <button type="button" class="btn btnAtras" id="backButton2">Atrás</button>
        <button type="button" class="btn btnSiguiente" id="nextButton2">Siguiente</button>
        <button type="button" class="modalCompras-close" id="modalClose2">&times;</button>
      </div>
    </div>


    <!-- Modal 3: Tipo de Envío -->
    <div class="modal-overlay" id="modalOverlay3">
      <div class="modal-compras">
        <h3>Tipo de Envío</h3>
        <input type="hidden" class="form-control" id="nroProducto" name="nroProducto" required>

        <!-- Campo de Distancia con ícono de distancia -->
        <label for="distanciaTotal" class="labels">Distancia en Km (Cliente-Almacen)</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-road"></i></span>
          <input type="text" class="form-control" id="distanciaTotal" name="distanciaTotal" disabled>
        </div>

        <!-- Campo de Costo del Pedido con ícono de dinero -->
        <label for="costoPedido" class="labels">Costo del pedido (En Bs.)</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-money-bill-wave"></i></span>
          <input type="text" class="form-control" id="costoPedido" oninput="calcular()" name="costoPedido"
            placeholder="Costo actual del pedido" disabled required>
        </div>

        <!-- Selección de Tipo de Envío con ícono de camión de entrega -->
        <label for="tipoEnvio" class="labels">Tipo de Envío</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-truck"></i></span>
          <select id="tipoEnvio" class="form-control" onchange="calcular()">
            <option value="">Seleccione una opción</option>
            <option value="directo">Recojo directo</option>
            <option value="delivery">Envío con Delivery</option>
          </select>
        </div>

        <!-- Campo de Costo Total con ícono de suma -->
        <label for="costoTotal" class="labels">Costo total (En Bs.):</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-calculator"></i></span>
          <input type="text" id="costoTotal" class="form-control" disabled required>
        </div>

        <!-- Botones de navegación -->
        <button type="button" class="btn btnAtras" id="backButton3">Atrás</button>
        <button type="button" class="btn btnSiguiente" id="nextButton3">Siguiente</button>
        <button type="button" class="modalCompras-close" id="modalClose3">&times;</button>
      </div>
    </div>


    <!-- Modal 4: Tipo de Pago -->
    <div class="modal-overlay" id="modalOverlay4">
      <div class="modal-compras">
        <h3>Tipo de Pago</h3>

        <!-- Selección de tipo de pago con ícono de moneda -->
        <label for="tipoPago">Seleccione el tipo de pago:</label>
        <div class="input-group">
          <span class="input-group-text"><i class="fa fa-wallet"></i></span>
          <select id="tipoPago" class="form-control" onchange="togglePaymentFields()" required>
            <option value="">Seleccione una opción</option>
            <option value="qr">Pago con QR</option>
            <option value="tarjeta">Pago con Tarjeta</option>
          </select>
        </div>

        <!-- Campos de tarjeta (ocultos por defecto) -->
        <div id="tarjetaFields" style="display: none; margin-top: 1rem;">
          <label for="tarjeta">Número de tarjeta:</label>
          <div class="input-group">
            <span class="input-group-text"><i class="fa fa-credit-card"></i></span>
            <input type="text" id="tarjeta" name="tarjeta" placeholder="Número de tarjeta" class="form-control">
          </div>

          <label for="expiracion">Fecha de expiración:</label>
          <div class="input-group">
            <span class="input-group-text"><i class="fa fa-calendar-alt"></i></span>
            <input type="text" id="expiracion" name="expiracion" placeholder="MM/YY" class="form-control">
          </div>

          <label for="cvv">Código CVV:</label>
          <div class="input-group">
            <span class="input-group-text"><i class="fa fa-key"></i></span>
            <input type="text" id="cvv" name="cvv" placeholder="Código CVV" class="form-control">
          </div>
        </div>

        <!-- Campo QR para pago con ícono QR (oculto por defecto) -->
        <div id="qrcode" style="display: none;">
        </div>

        <!-- Botón de navegación y finalizar -->
        <button type="button" class="btn btnAtras" id="backButton4">Atrás</button>
        <button type="submit" class="btn btnSiguiente" id="finalizarButton" style="display: none;">Finalizar</button>

        <!-- Botón para cerrar modal -->
        <button type="button" class="modalCompras-close" id="modalClose4">&times;</button>
      </div>
    </div>


  </form>


  <!-- page loading -->
  <div class="page-loading">
    <h2>Cargando...</h2>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
  <script type="module" src="/moduloProducto/src/pages/products.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Referencias a los botones y formularios de cada ventana

      const buyButton = document.getElementById('buyButton');

      const modalOverlay1 = document.getElementById('modalOverlay1');
      const modalClose1 = document.getElementById('modalClose1');
      const nextButton1 = document.getElementById('nextButton1');
      const modalOverlay2 = document.getElementById('modalOverlay2');
      const modalClose2 = document.getElementById('modalClose2');
      const nextButton2 = document.getElementById('nextButton2');
      const backButton2 = document.getElementById('backButton2');
      const modalOverlay3 = document.getElementById('modalOverlay3');
      const modalClose3 = document.getElementById('modalClose3');
      const nextButton3 = document.getElementById('nextButton3');
      const backButton3 = document.getElementById('backButton3');
      const modalOverlay4 = document.getElementById('modalOverlay4');
      const modalClose4 = document.getElementById('modalClose4');
      const backButton4 = document.getElementById('backButton4');
      const completeForm = document.getElementById('completeForm');
      // Mostrar la primera ventana modal al hacer clic en "Comprar"
      buyButton.addEventListener('click', () => {
        modalOverlay1.style.display = 'flex';
        const usuarioGuardado = JSON.parse(sessionStorage.getItem('usuario'));
        const cartItem = document.querySelector('.cart-item');
        const nid = cartItem.getAttribute('data-id');
        const totalPrecioCarrito = document.getElementById("totalPrecioCarrito").textContent;
        if (usuarioGuardado) {
          document.getElementById('nombreCliente').value = usuarioGuardado.nombre;
          document.getElementById('apellidoCliente').value = usuarioGuardado.apellido;
          document.getElementById('nroProducto').value = usuarioGuardado.direccion;
          document.getElementById('ciCliente').value = usuarioGuardado.ci;
          //para el carrito
          const numeroExtraido = parseFloat(totalPrecioCarrito.match(/[\d.]+/)[0]);
          document.getElementById("costoPedido").value = numeroExtraido;
          document.getElementById('nroProducto').value = nid;
          
        }
        else {
          alert("DEBE INICIAR SESION O EN SU DEFECTO REGISTRARSE PRIMERO");
          window.location.href = '/login-registrar';
        }
      });
      // Cerrar cada modal al hacer clic en el botón de cerrar
      modalClose1.addEventListener('click', () => { modalOverlay1.style.display = 'none'; });
      modalClose2.addEventListener('click', () => { modalOverlay2.style.display = 'none'; });
      modalClose3.addEventListener('click', () => { modalOverlay3.style.display = 'none'; });
      modalClose4.addEventListener('click', () => { modalOverlay4.style.display = 'none'; });
      // Transición de la primera a la segunda ventana (Datos de Usuario -> Dirección)
      nextButton1.addEventListener('click', () => {
        const nombreCliente = document.getElementById('nombreCliente').value;
        const apellidoCliente = document.getElementById('apellidoCliente').value;
        if (nombreCliente && apellidoCliente) {
          modalOverlay1.style.display = 'none';
          modalOverlay2.style.display = 'flex';
          //llamada al mapa
          initMap();
        } else {
          alert('Por favor, complete todos los campos.');
        }
      });
      // Transición de la segunda a la tercera ventana (Dirección -> Tipo de Envío)
      nextButton2.addEventListener('click', () => {
        const longitudCliente = document.getElementById('longitudCliente').value;
        const latitudCliente = document.getElementById('latitudCliente').value;
        if (longitudCliente && latitudCliente) {
          modalOverlay2.style.display = 'none';
          modalOverlay3.style.display = 'flex';
          //calculo de la distancia
          const cartItem = document.querySelector('.cart-item');
          const nid = cartItem.getAttribute('data-id');
          obtenerDistancia(nid)
            .then(distancia => {
              if (distancia !== null) {
                //console.log(`Distancia entre cliente y almacén: ${distancia.toFixed(2)} km`);
                document.getElementById('distanciaTotal').value = distancia.toFixed(3);
              } else {
                console.log('No se pudo calcular la distancia');
              }
            });
          //mapa estatico
          staticMap();
        } else {
          alert('Por favor, complete todos los campos de dirección.');
        }
      });
      // Transición de la tercera a la cuarta ventana (Tipo de Envío -> Tipo de Pago)
      nextButton3.addEventListener('click', () => {
        const tipoEnvio = document.getElementById('tipoEnvio').value;
        if (tipoEnvio) {
          modalOverlay3.style.display = 'none';
          modalOverlay4.style.display = 'flex';
        } else {
          alert('Por favor, seleccione un tipo de envío.');
        }
      });

          // Funciones de retroceso
      backButton2.addEventListener('click', () => {
        modalOverlay2.style.display = 'none';
        modalOverlay1.style.display = 'flex';
      });

      backButton3.addEventListener('click', () => {
        modalOverlay3.style.display = 'none';
        modalOverlay2.style.display = 'flex';
      });

      backButton4.addEventListener('click', () => {
        modalOverlay4.style.display = 'none';
        modalOverlay3.style.display = 'flex';
      });
    });
  </script>
  <!--Script para el modal 4-->
  <script>
    function togglePaymentFields() {
          const tipoPago = document.getElementById("tipoPago").value;
          const tarjetaFields = document.getElementById("tarjetaFields");
          const qrCode = document.getElementById("qrcode");
          const finalizarButton = document.getElementById("finalizarButton");

          if (tipoPago === "tarjeta") {
              // Mostrar campos de tarjeta y ocultar el QR
              tarjetaFields.style.display = "block";
              qrCode.style.display = "none";
              finalizarButton.style.display = "block"; // Mostrar botón "Finalizar"
          } else if (tipoPago === "qr") {
              // Ocultar campos de tarjeta y mostrar el QR
              tarjetaFields.style.display = "none";
              qrCode.style.display = "";
              finalizarButton.style.display = ""; // Mostrar botón "Finalizar"
              generarQR();  // Genera el QR directamente
          } else {
              // Si no hay selección, oculta ambos y el botón "Finalizar"
              tarjetaFields.style.display = "none";
              qrCode.style.display = "none";
              finalizarButton.style.display = "none"; // Ocultar botón "Finalizar"
          }
      }
  </script>
  <script>
    function calcular() {
      const numero1 = parseFloat(document.getElementById('costoPedido').value);
      const numero2 = document.getElementById('distanciaTotal').value;
      const numero3 = parseFloat((10 * numero2).toFixed(3));
      const operacion = document.getElementById('tipoEnvio').value;
      let resultado;
      if (operacion === 'directo') {
        resultado = numero1;
      } else if (operacion === 'delivery') {
        resultado = numero1 + numero3;
      } else {
        resultado = 0;
      }
      document.getElementById('costoTotal').value = resultado;
    }
  </script>
  <script>
    // Función principal que calcula la distancia entre el cliente y el almacén
    async function obtenerDistancia(id_prod) {
        // Datos del cliente 
      const latitud2 = document.getElementById('latitudCliente').value; 
      const longitud2 = document.getElementById('longitudCliente').value; 
      try {
        const response = await fetch(`/listarAlmacenIdprod/${id_prod}`);
        if (!response.ok) {
          throw new Error('Error en la solicitud a la API');
        }

        const data = await response.json();

        // Verificamos que el array contenga al menos un objeto
        if (data.length > 0) {
          const { latitud, longitud } = data[0];
          // Calculamos la distancia usando la fórmula de Haversine
          const distancia = calcularDistanciaHaversine(
            parseFloat(latitud),
            parseFloat(longitud),
            latitud2,
            longitud2
          );

          return distancia; // Devolvemos la distancia en kilómetros
        } else {
          throw new Error('No se encontraron datos para el ID proporcionado');
        }
      } catch (error) {
        console.error('Error:', error);
        return null; // Devolver null en caso de error
      }
    }

    // Función para calcular la distancia con la fórmula de Haversine
    function calcularDistanciaHaversine(lat1, lon1, lat2, lon2) {
      const R = 6371; // Radio de la Tierra en kilómetros
      const dLat = (lat2 - lat1) * (Math.PI / 180);
      const dLon = (lon2 - lon1) * (Math.PI / 180);
      
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);
        
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distancia = R * c; // Distancia en kilómetros

      return distancia;
    }
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
  <script>
    function generarQR() {
      // Obtenemos los valores de los campos del modal
      const tipoPago = document.getElementById("tipoPago").value;
      const tarjeta = document.getElementById("tarjeta").value;
      const expiracion = document.getElementById("expiracion").value;
      const cvv = document.getElementById("cvv").value;

      // Validación de campos del modal
      /*if (!tipoPago || !tarjeta || !expiracion || !cvv) {
        alert("Por favor, complete todos los campos de pago antes de generar el código QR.");
        return; // Detiene la función si algún campo está vacío
      }*/

      // Obtenemos los valores de los campos adicionales para el mensaje QR
      const nombre = document.getElementById("nombreCliente").value;
      const apellido = document.getElementById("apellidoCliente").value;
      const ci = document.getElementById("ciCliente").value;
      const direccion = document.getElementById("longitudCliente").value;
      const costoPedido = document.getElementById("costoPedido").value;
      const tipoEnvio = document.getElementById("tipoEnvio").value === 'directo' ? "Recojo directo" : "Delivery";
      const costoTotal = document.getElementById("costoTotal").value;

      // Creamos un mensaje con todos los datos obtenidos
      const mensaje = `Compra exitosa - ${nombre} ${apellido} - Total: ${costoTotal}`;

      // Seleccionamos el contenedor del QR y limpiamos antes de generar uno nuevo
      const qrcodeContainer = document.getElementById('qrcode');
      qrcodeContainer.innerHTML = ""; // Limpiar contenedor
      qrcodeContainer.innerHTML = `<p>Escanee el código QR para realizar el pago</p>`;
      // Generamos el código QR con el mensaje dinámico
      new QRCode(qrcodeContainer, mensaje);

      // Mostrar el botón de "Generar PDF" después de finalizar la compra
      //document.getElementById("pdfButton").classList.remove("hidden");
    }
  </script>

  <!--------Google Maps------>
  <script>
    let map, marker;

function initMap() {
    // Coordenadas iniciales del mapa
    const initialLocation = { lat: -16.5060, lng: -68.1155 };
    //const initialLocation = { lat: -16.500849, lng: -68.173632 };

    // Crear el mapa
    map = new google.maps.Map(document.getElementById("map"), {
        center: initialLocation,
        zoom: 12,
    });

    // Crear el marcador
    marker = new google.maps.Marker({
        position: initialLocation,
        map: map,
        draggable: true, // Permitir arrastrar el marcador
    });

    // Escuchar el evento de arrastre del marcador para obtener la ubicación
    google.maps.event.addListener(marker, 'dragend', function (event) {
        const lat = event.latLng.lat();
        const lng = event.latLng.lng();

        // Guardar las coordenadas en los campos de longitud y latitud
        document.getElementById("latitudCliente").value = lat;
        document.getElementById("longitudCliente").value = lng;
    });
  }
  </script>
  <script>
    let map1, marker1, directionsService, directionsRenderer;
  
    async function staticMap() {
      // Obtener las coordenadas del cliente desde el formulario
      const longitudI = parseFloat(document.getElementById("longitudCliente").value);
      const latitudI = parseFloat(document.getElementById("latitudCliente").value);
      // Crear la ubicación a partir de las coordenadas del cliente
      const clientLocation = { lat: latitudI, lng: longitudI };
  
      if (isNaN(latitudI) || isNaN(longitudI)) {
        console.error("Las coordenadas del cliente no son válidas.");
        return;
      }
  
      // Configuración de la ubicación del cliente y creación del mapa
      const location = { lat: latitudI, lng: longitudI };
      map1 = new google.maps.Map(document.getElementById("map1"), {
        center: location,
        zoom: 12,
      });
  
      // Crear el marcador del cliente
      marker1 = new google.maps.Marker({
        position: location,
        map: map1,
        draggable: false,
        title: "Ubicación del Cliente"
      });
      // Inicializar el servicio y renderizador de direcciones
      directionsService = new google.maps.DirectionsService();
      directionsRenderer = new google.maps.DirectionsRenderer();
  
      // Vincular el renderizador al mapa
      directionsRenderer.setMap(map1);
      // Procesamiento de los elementos del carrito
      const cartItems = document.querySelectorAll(".cart-item");
  
      for (const item of cartItems) {
        const id_prod = item.getAttribute("data-id");
        try {
          // Llamada a la API para obtener la ubicación del producto
          const response = await fetch(`/listarAlmacenIdprod/${id_prod}`);
          if (!response.ok) {
            throw new Error(`Error al obtener datos de la API para ID ${id_prod}`);
          }
  
          const data = await response.json();
          console.log(`Datos recibidos para ID ${id_prod}:`, data);
  
          if (data.length > 0) {
            const { latitud, longitud } = data[0];
  
            if (!isNaN(latitud) && !isNaN(longitud)) {
              const productLocation = { lat: parseFloat(latitud), lng: parseFloat(longitud) };
              const productMarker = new google.maps.Marker({
                position: productLocation,
                map: map1,
                title: `Producto ID: ${id_prod}`,
                icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
              });
              drawRoute(clientLocation, productLocation);
  
            } else {
              console.warn(`Coordenadas inválidas para el producto ID ${id_prod}`);
            }
          } else {
            console.warn(`No se encontraron datos para el producto ID ${id_prod}`);
          }
        } catch (error) {
          console.error(`Error al obtener la ubicación del producto ${id_prod}:`, error);
        }
      }
    }
    // Función para trazar la ruta desde el cliente hasta el producto
    function drawRoute(start, end) {
      const request = {
        origin: start,       // Coordenadas de inicio (cliente)
        destination: end,    // Coordenadas de destino (producto)
        travelMode: google.maps.TravelMode.DRIVING // Modo de transporte
      };
  
      directionsService.route(request, (result, status) => {
        if (status === google.maps.DirectionsStatus.OK) {
          // Mostrar la ruta en el mapa
          directionsRenderer.setDirections(result);
        } else {
          console.error("Error al calcular la ruta:", status);
        }
      });
    }
  </script>

  <!--MY KEY!!!!!!!!!!!!!!!!!!!-->
  <script src="https://maps.googleapis.com/maps/api/js?key="></script>
  <!--Pruebas-->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <!-- Bootstrap core JavaScript-->
  <script src="/dashboard/vendor/jquery/jquery.min.js"></script>
  <script src="/dashboard/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

  <!-- Custom scripts for all pages-->
  <script src="/dashboard/js/sb-admin-2.min.js"></script>

  <!-- Core plugin JavaScript-->
  <script src="/dashboard/vendor/jquery-easing/jquery.easing.min.js"></script>

  <!-- datatables -->
  <script src="https://cdn.datatables.net/2.1.8/js/dataTables.js"></script>
  <script src="https://cdn.datatables.net/2.1.8/js/dataTables.bootstrap5.js"></script>
  <script src="https://cdn.datatables.net/responsive/3.0.3/js/dataTables.responsive.js"></script>
  <script src="https://cdn.datatables.net/responsive/3.0.3/js/responsive.bootstrap5.js"></script>

  <!--Funcion para llenar el form-->
  <script src="/moduloProducto/miJS/finalizarCompra.js"></script>

  <script src="/moduloProducto/miJS/resetForm.js"></script>
</body>

</html>